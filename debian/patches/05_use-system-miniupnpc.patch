Description: Use system-installed miniupnpc instead of bundled library
 Needs to be made optional before forwarding upstream, see 
 https://trac.transmissionbt.com/ticket/4323 for similar code
Author: Jeremy Bicha <jbicha@ubuntu.com>
Forwarded: no
---
 Makefile.am        |   29 +----------------------------
 configure.ac       |    7 +++++++
 server/vino-upnp.c |   28 ++++++++++++++++++----------
 3 files changed, 26 insertions(+), 38 deletions(-)

--- a/Makefile.am
+++ b/Makefile.am
@@ -36,29 +36,6 @@ libeggsmclient_la_SOURCES = \
 	server/smclient/eggdesktopfile.c \
 	server/smclient/eggdesktopfile.h
 
-VINO_MINIUPNP_cppflags = -DNDEBUG
-
-VINO_MINIUPNP_sources = \
-	server/miniupnp/bsdqueue.h \
-	server/miniupnp/codelength.h \
-	server/miniupnp/declspec.h \
-	server/miniupnp/igd_desc_parse.c \
-	server/miniupnp/igd_desc_parse.h \
-	server/miniupnp/minisoap.c \
-	server/miniupnp/minisoap.h \
-	server/miniupnp/minissdpc.c \
-	server/miniupnp/minissdpc.h \
-	server/miniupnp/miniupnpc.c \
-	server/miniupnp/miniupnpc.h \
-	server/miniupnp/miniwget.c \
-	server/miniupnp/miniwget.h \
-	server/miniupnp/minixml.c \
-	server/miniupnp/minixml.h \
-	server/miniupnp/upnpcommands.c \
-	server/miniupnp/upnpcommands.h \
-	server/miniupnp/upnpreplyparse.c \
-	server/miniupnp/upnpreplyparse.h
-
 if VINO_HAVE_SELF_IFADDRS
 VINO_IFADDRS_sources = \
 	server/libvncserver/ifaddr/getifaddrs.c \
@@ -101,12 +78,10 @@ vino_server_CPPFLAGS = \
 	-I$(top_srcdir) \
 	-I$(top_srcdir)/common \
 	-I$(top_srcdir)/server/libvncserver \
-	-I$(top_srcdir)/server/miniupnp \
 	-I$(top_srcdir)/server/smclient \
 	-I$(top_builddir) \
 	-I$(top_builddir)/server \
 	$(VINO_SERVER_CFLAGS) \
-	$(VINO_MINIUPNP_cppflags) \
 	$(LIBGCRYPT_CFLAGS) \
 	$(WARN_CFLAGS) \
 	$(DISABLE_DEPRECATED) \
@@ -122,6 +97,7 @@ vino_server_LDADD = \
 	$(VINO_SERVER_LIBS) \
 	$(LIBGCRYPT_LIBS) \
 	$(JPEG_LIBS) \
+	$(LIBUPNP_LIBS) \
 	$(X_LIBS) $(XTEST_LIBS) $(XSHM_LIBS) $(XDAMAGE_LIBS) $(ZLIB_LIBS)
 
 if VINO_HAVE_TELEPATHY_GLIB
@@ -169,7 +145,6 @@ vino_server_SOURCES = \
 	server/vino-dbus-error.h \
 	server/vino-upnp.h \
 	server/vino-upnp.c \
-	$(VINO_MINIUPNP_sources) \
 	$(VINO_IFADDR_sources) \
 	$(VINO_LIBVNCSERVER_sources) \
 	$(VINO_TELEPATHY_GLIB_sources)
@@ -294,8 +269,6 @@ dist_noinst_DATA = \
 	server/libvncserver/tabletranstemplate.c \
         server/libvncserver/tableinitcmtemplate.c \
         server/libvncserver/zrleencodetemplate.c \
-	server/miniupnp/README \
-	server/miniupnp/LICENCE \
 	\
 	ChangeLog.pre-git \
 	vino.doap
--- a/configure.ac
+++ b/configure.ac
@@ -277,6 +277,13 @@ AS_IF([test x$with_systemduserunitdir !=
   [AC_SUBST([systemduserunitdir], [$with_systemduserunitdir])])
 AM_CONDITIONAL([INSTALL_USER_UNITS], [test -n "$with_systemduserunitdir" -a "x$with_systemduserunitdir" != xno])
 
+dnl ----------------------------------------------------------------------------
+dnl
+dnl Allow use of system miniupnp library
+
+LIBUPNP_LIBS="-lminiupnpc"
+AC_SUBST(LIBUPNP_LIBS)
+
 # GNOME libraries
 GTK_VERSION=3.0.0
 GLIB_VERSION=2.32.0
--- a/server/vino-upnp.c
+++ b/server/vino-upnp.c
@@ -27,8 +27,8 @@
 #endif
 
 #include <string.h>
-#include "miniupnp/miniupnpc.h"
-#include "miniupnp/upnpcommands.h"
+#include <miniupnpc/miniupnpc.h>
+#include <miniupnpc/upnpcommands.h>
 
 #include "vino-upnp.h"
 #include "vino-util.h"
@@ -72,6 +72,7 @@ update_upnp_status (VinoUpnp *upnp)
 {
   struct UPNPDev * devlist;
   int res;
+  int upnperror = 0;
 
   if (upnp->priv->have_igd)
     return TRUE;
@@ -79,7 +80,7 @@ update_upnp_status (VinoUpnp *upnp)
   clean_upnp_data (upnp);
 
   dprintf (UPNP, "UPnP: Doing the discovery... ");
-  devlist = upnpDiscover (2000, NULL, NULL, 0);
+  devlist = upnpDiscover (2000, NULL, NULL, 0, 0, 2, &upnperror);
   if (!devlist)
     {
       dprintf (UPNP, "nothing found, aborting.");
@@ -180,7 +181,7 @@ vino_upnp_get_external_ip (VinoUpnp *upn
     return NULL;
 
   UPNP_GetExternalIPAddress (upnp->priv->urls->controlURL,
-			     upnp->priv->data->servicetype,
+			     upnp->priv->data->first.servicetype,
 			     ip);
   if (ip[0])
     if (strcmp (ip, "0.0.0.0") == 0)
@@ -211,11 +212,15 @@ vino_upnp_add_port (VinoUpnp *upnp, int
       ext_port = g_strdup_printf ("%d", local_port);
       dprintf (UPNP, "UPnP: Trying to forward port %d...: ", local_port);
       UPNP_GetSpecificPortMappingEntry (upnp->priv->urls->controlURL,
-					upnp->priv->data->servicetype,
+					upnp->priv->data->first.servicetype,
 					ext_port,
 					"TCP",
+					NULL,
 					int_client_tmp,
-					int_port_tmp);
+					int_port_tmp,
+					NULL,
+					NULL,
+					NULL);
       if ( (strcmp (int_client_tmp, upnp->priv->lanaddr) == 0) && (strcmp (int_port_tmp, ext_port) == 0) )
 	{
 	  dprintf (UPNP, "UPnP: Found a previous redirect\n");
@@ -247,12 +252,14 @@ vino_upnp_add_port (VinoUpnp *upnp, int
 			  g_get_host_name ());  
 
   err = UPNP_AddPortMapping (upnp->priv->urls->controlURL,
-			     upnp->priv->data->servicetype,
+			     upnp->priv->data->first.servicetype,
 			     ext_port,
 			     int_port,
 			     upnp->priv->lanaddr,
 			     desc,
-			     "TCP");
+			     "TCP",
+			     NULL,
+			     NULL);
   if (err == 0)
     {
       upnp->priv->port = local_port;
@@ -285,9 +292,10 @@ vino_upnp_remove_port (VinoUpnp *upnp)
 
   port = g_strdup_printf ("%d", upnp->priv->port);
   err = UPNP_DeletePortMapping (upnp->priv->urls->controlURL,
-				upnp->priv->data->servicetype,
+				upnp->priv->data->first.servicetype,
 				port,
-				"TCP");
+				"TCP",
+				NULL);
   if (err == 0)
     dprintf (UPNP, "UPnP: Removed forwarded port %d\n", upnp->priv->port);
   else
